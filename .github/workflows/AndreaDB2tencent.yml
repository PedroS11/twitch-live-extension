# This workflow will build a docker container, publish and deploy it to Tencent Kubernetes Engine (TKE).
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Tencent Kubernetes Engine cluster, 
#    including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: 
#    - TENCENT_CLOUD_SECRET_ID with Tencent Cloud secret id
#    - TENCENT_CLOUD_SECRET_KEY with Tencent Cloud secret key 
#    - TENCENT_CLOUD_ACCOUNT_ID with Tencent Cloud account id
#    - TKE_REGISTRY_PASSWORD with TKE registry password
#
# 3. Change the values for the TKE_IMAGE_URL, TKE_REGION, TKE_CLUSTER_ID and DEPLOYMENT_NAME environment variables (below).

name: Tencent Kubernetes Engine

on:
  release:
    types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  TKE_IMAGE_URL: ccr.ccs.tencentyun.com/demo/mywebapp
  TKE_REGION: ap-guangzhou
  TKE_CLUSTER_ID: cls-mywebapp
  DEPLOYMENT_NAME: tke-test

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v2
      
    # Build
    - name: Build Docker image
      run: |        
        docker build -t ${TKE_IMAGE_URL}:${GITHUB_SHA} .

    - name: Login TKE Registry
      run: |
        docker login -u ${{ secrets.TENCENT_CLOUD_ACCOUNT_ID }} -p ${{ secrets.TKE_REGISTRY_PASSWORD }} ${TKE_IMAGE_URL}

    # Push the Docker image to TKE Registry
    - name: Publish
      run: |
        docker push ${TKE_IMAGE_URL}:${GITHUB_SHA}

    - name: Set up Kustomize
      run: |
        curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Set up ~/.kube/config for connecting TKE cluster
      uses: TencentCloud/tke-cluster-credential-action@v1
      with:
        secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
        secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
        tke_region: ${{ env.TKE_REGION }}
        cluster_id: ${{ env.TKE_CLUSTER_ID }}
    
    - name: Switch to TKE context
      run: |
        kubectl config use-context ${TKE_CLUSTER_ID}-context-default

    # Deploy the Docker image to the TKE cluster
    - name: Deploy
      run: |
        ./kustomize edit set image ${TKE_IMAGE_URL}:${GITHUB_SHA}
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/${DEPLOYMENT_NAME}
        kubectl get services -o wide
        - name: Cache
  uses: actions/cache@v2.1.6
  with:
    # A list of files, directories, and wildcard patterns to cache and restore
    path: 
    # An explicit key for restoring and saving the cache
    key: 
    # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
    restore-keys: # optional
    # The chunk size used to split up large files during upload, in bytes
    upload-chunk-size: # optional
    - name: Setup Go environment
  uses: actions/setup-go@v2.1.3
  with:
    # The Go version to download (if necessary) and use. Supports semver spec and ranges.
    go-version: # optional
    # Whether to download only stable versions
    stable: # optional, default is true
    # Used to pull node distributions from go-versions.  Since there's a default, this is typically not supplied by the user.
    token: # optional, default is ${{ github.token }}
    - name: Setup Java JDK
  uses: actions/setup-java@v2.1.0
  with:
    # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
    java-version: 
    # Java distribution. See the list of supported distributions in README file
    distribution: 
    # The package type (jdk, jre, jdk+fx, jre+fx)
    java-package: # optional, default is jdk
    # The architecture of the package
    architecture: # optional, default is x64
    # Path to where the compressed JDK is located
    jdkFile: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec
    check-latest: # optional
    # ID of the distributionManagement repository in the pom.xml file. Default is `github`
    server-id: # optional, default is github
    # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
    server-username: # optional, default is GITHUB_ACTOR
    # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
    server-password: # optional, default is GITHUB_TOKEN
    # Path to where the settings.xml file will be written. Default is ~/.m2.
    settings-path: # optional
    # Overwrite the settings.xml file if it exists. Default is "true".
    overwrite-settings: # optional, default is true
    # GPG private key to import. Default is empty string.
    gpg-private-key: # optional
    # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
    gpg-passphrase: # optional
    - name: Download a Build Artifact
  uses: actions/download-artifact@v2.0.9
  with:
    # Artifact name
    name: # optional
    # Destination path
    path: # optional
    - name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v1.8.0
  with:
    # Optional SDK version to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x
    dotnet-version: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Whether prerelease versions should be matched with non-exact versions (for example 5.0.0-preview.6 being matched by 5, 5.0, 5.x or 5.0.x). Defaults to false if not provided.
    include-prerelease: # optional
    - name: Trigger Buildkite Pipeline
  # You may pin to the exact commit or the version.
  # uses: buildkite/trigger-pipeline-action@d03b6f2760252274dc019e1298095c3b61baeaf8
  uses: buildkite/trigger-pipeline-action@v1.2.0
  - name: Terraform Apply for GorillaStack
  # You may pin to the exact commit or the version.
  # uses: GorillaStack/github-action-apply-on-merge@71fab58db0a839b1e9b34e87601a5e4347c52c88
  uses: GorillaStack/github-action-apply-on-merge@v0.1.0
  with:
    # The action type (currently "validate" and "apply" are available)
    action: # default is validate
    # The name of the tfstate bucket stack
    stack_name: # default is github-actions-gorillastack-tfstate
    # The region in which you deployed the tfstate bucket stack
    aws_default_region: # default is us-east-1
    # The AWS Access Key Id for the user with privileges to access the tfstate bucket
    aws_access_key_id: # default is defaulted-for-everything-but-apply
    # The AWS Secret Access Key for the user with privileges to access the tfstate bucket
    aws_secret_access_key: # default is defaulted-for-everything-but-apply
    # GorillaStack API Key, which is read-write or read-only, tied to your user identity
    gorillastack_api_key: # default is defaulted-for-everything-but-apply
    # GorillaStack Team Id, sets context of which team/tenant you are targeting
    gorillastack_team_id: # default is defaulted-for-everything-but-apply
    - name: Deploy to Cloudflare Workers with Wrangler
  # You may pin to the exact commit or the version.
  # uses: cloudflare/wrangler-action@21f14faa062c33c938e3f37c30d52021bed521cb
  uses: cloudflare/wrangler-action@1.2.0
  with:
    # (Legacy) Your Cloudflare API Key
    apiKey: # optional
    # Your Cloudflare API Token
    apiToken: # optional
    # (Legacy) Your Cloudflare Email
    email: # optional
    # The environment you'd like to publish your Workers project to - must be defined in wrangler.toml
    environment: # optional
    # The relative path which Wrangler commands should be run from
    workingDirectory: # optional
    # The version of Wrangler you'd like to use to publish your Workers project
    wranglerVersion: # optional
    # A new line deliminated string of environment variable names that should be configured as Worker secrets
    secrets: # optional
    - name: HashiCorp - Setup Terraform
  # You may pin to the exact commit or the version.
  # uses: hashicorp/setup-terraform@d22444889af304a44b997011fbabb81ff705a7b4
  uses: hashicorp/setup-terraform@v1.2.1
  with:
    # The hostname of a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file. Defaults to `app.terraform.io`.
    cli_config_credentials_hostname: # optional, default is app.terraform.io
    # The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file.
    cli_config_credentials_token: # optional
    # The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.
    terraform_version: # optional, default is latest
    # Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.
    terraform_wrapper: # optional, default is true
    - name: Set up gcloud Cloud SDK environment
  # You may pin to the exact commit or the version.
  # uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
  uses: google-github-actions/setup-gcloud@v0.2.0
  with:
    # Version of the gcloud SDK to install. If unspecified or set to "latest",
the latest available gcloud SDK version for the target platform will be
installed. Example: "290.0.1".
    version: # optional, default is latest
    # Service account email address to use for authentication. This is required
for legacy .p12 keys but can be omitted for .json keys. This is usually of
the format <name>@<project-id>.iam.gserviceaccount.com.
    service_account_email: # optional
    # Service account key to use for authentication. This should be the JSON
formatted private key which can be exported from the Cloud Console. The
value can be raw or base64-encoded.
    service_account_key: # optional
    # ID of the Google Cloud project. If provided, this will configure gcloud to
use this project ID by default for commands. Individual commands can still
override the project using the --project flag which takes precedence.
    project_id: # optional
    # Export the provided credentials as Google Default Application Credentials.
This will make the credentials available to later steps via the
GOOGLE_APPLICATION_CREDENTIALS environment variable. Future steps that
consume Default Application Credentials will automatically detect and use
these credentials.
    export_default_credentials: # optional
    - name: Lightstep Services Change Report
  # You may pin to the exact commit or the version.
  # uses: lightstep/lightstep-action-snapshot@166ec5f31d611858ebe9ed3437848e8fe675fb89
  uses: lightstep/lightstep-action-snapshot@v0.2.1
  with:
    # The organization associated with your Lightstep account (usually your company name)
    lightstep_organization: # optional
    # The Lightstep project associated with this repository
    lightstep_project: # optional
    # Only show services in the snapshot from this comma-separated list
    lightstep_service_filter: # optional
    # The query to use when taking a snapshot
    lightstep_snapshot_query: # optional
    # The Lightstep snapshot id to summarize
    lightstep_snapshot_id: # optional
    # The Lightstep snapshot id to compare with lightstep_snapshot_id
    lightstep_snapshot_compare_id: # optional
    # The key to access the Lightstep Public API
    lightstep_api_key: # optional
    # Github API Token
    github_token: # optional
    # If set to true, will not add a comment to pull-requests
    disable_comment: # optional
    - name: Lightstep Pre-Deploy Check
  # You may pin to the exact commit or the version.
  # uses: lightstep/lightstep-action-predeploy@22bec553a6d0fb3de5026acb1159085601f76408
  uses: lightstep/lightstep-action-predeploy@v0.2.6
  with:
    # The organization associated with your Lightstep account (usually your company name)
    lightstep_organization: # optional
    # The Lightstep project associated with this repository
    lightstep_project: # optional
    # The key to access the Lightstep Public API
    lightstep_api_key: # optional
    # The token to access the Rollbar API
    rollbar_api_token: # optional
    # The token to access the PagerDuty API
    pagerduty_api_token: # optional
    # If set to true, collapse all conditions to a single table row
    rollup_conditions: # optional
    # If set to true, will not add a comment to pull-requests
    disable_comment: # optional
    - name: AWS CloudFormation "Deploy CloudFormation Stack" Action for GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: aws-actions/aws-cloudformation-github-deploy@dfbee8a4fec90af61b71bafda3890f8c4a2075ef
  uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
  with:
    # The name of the CloudFormation stack
    name: 
    # The path or URL to the CloudFormation template
    template: 
    # The comma-delimited list of stack template capabilities to acknowledge. Defaults to 'CAPABILITY_IAM'
    capabilities: # optional, default is CAPABILITY_IAM
    # The parameters to override in the stack inputs. The list is comma-delimited, with each entry formatted as <ParameterName>=<ParameterValue>.
    parameter-overrides: # optional
    # If the CloudFormation change set is empty, do not fail. Defaults to '0' (will fail on empty change set)
    no-fail-on-empty-changeset: # optional, default is 0
    # Disable rollback of the stack if stack creation fails. Defaults to '0' (will rollback if stack creation fails). This input is only used for stack creation, not for stack update
    disable-rollback: # optional, default is 0
    # The amount of time that can pass before the stack status becomes CREATE_FAILED. This input is only used for stack creation, not for stack update
    timeout-in-minutes: # optional
    # The comma-delimited list of Amazon SNS topic ARNs to publish stack related events
    notification-arns: # optional
    # The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to create the stack. AWS CloudFormation uses the role's credentials to make calls on your behalf. AWS CloudFormation always uses this role for all future operations on the stack. As long as users have permission to operate on the stack, AWS CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack
    role-arn: # optional
    # Key-value pairs to associate with this stack. This input should be JSON-formatted, for example [ { "Key": "string", "Value": "string" } ]
    tags: # optional
    # Whether to enable termination protection on the specified stack. Defaults to '0' (terminated protection will be disabled) This input is only used for stack creation, not for stack update
    termination-protection: # optional, default is 2
    - name: Amazon ECR "Login" Action for GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
  uses: aws-actions/amazon-ecr-login@v1
  with:
    # A comma-delimited list of AWS account IDs that are associated with the ECR registries. If you do not specify a registry, the default ECR registry is assumed.
    registries: # optional
    # Whether to skip explicit logout of the registries during post-job cleanup. Exists for backward compatibility on self-hosted runners. Not recommended.
    skip-logout: # optional
    - name: EKS on Fargate
  # You may pin to the exact commit or the version.
  # uses: aws-actions/amazon-eks-fargate@fa91b1ce6e342eb17a1d57df976506d02f074640
  uses: aws-actions/amazon-eks-fargate@v0.1.1
  - name: Amazon ECS "Render Task Definition" Action for GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
  uses: aws-actions/amazon-ecs-render-task-definition@v1
  with:
    # The path to the ECS task definition JSON file
    task-definition: 
    # The name of the container defined in the containerDefinitions section of the ECS task definition
    container-name: 
    # The URI of the container image to insert into the ECS task definition
    image: 
    - name: "Configure AWS Credentials" Action For GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
  uses: aws-actions/configure-aws-credentials@v1
  with:
    # AWS Access Key ID. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
    aws-access-key-id: # optional
    # AWS Secret Access Key. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
    aws-secret-access-key: # optional
    # AWS Session Token
    aws-session-token: # optional
    # AWS Region, e.g. us-east-2
    aws-region: 
    # Whether to set the AWS account ID for these credentials as a secret value, so that it is masked in logs. Valid values are 'true' and 'false'. Defaults to true
    mask-aws-account-id: # optional
    # Use the provided credentials to assume an IAM role and configure the Actions environment with the assumed role credentials rather than with the provided credentials
    role-to-assume: # optional
    # Role duration in seconds (default: 6 hours)
    role-duration-seconds: # optional
    # Role session name (default: GitHubActions)
    role-session-name: # optional
    # The external ID of the role to assume
    role-external-id: # optional
    # Skip session tagging during role assumption
    role-skip-session-tagging: # optional
    - name: Amazon ECS "Deploy Task Definition" Action for GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  with:
    # The path to the ECS task definition file to register
    task-definition: 
    # The name of the ECS service to deploy to. The action will only register the task definition if no service is given.
    service: # optional
    # The name of the ECS service's cluster.  Will default to the 'default' cluster
    cluster: # optional
    # Whether to wait for the ECS service to reach stable state after deploying the new task definition. Valid value is "true". Will default to not waiting.
    wait-for-service-stability: # optional
    # How long to wait for the ECS service to reach stable state, in minutes (default: 30 minutes, max: 6 hours). For CodeDeploy deployments, any wait time configured in the CodeDeploy deployment group will be added to this value.
    wait-for-minutes: # optional
    # The path to the AWS CodeDeploy AppSpec file, if the ECS service uses the CODE_DEPLOY deployment controller. Will default to 'appspec.yaml'.
    codedeploy-appspec: # optional
    # The name of the AWS CodeDeploy application, if the ECS service uses the CODE_DEPLOY deployment controller. Will default to 'AppECS-{cluster}-{service}'.
    codedeploy-application: # optional
    # The name of the AWS CodeDeploy deployment group, if the ECS service uses the CODE_DEPLOY deployment controller. Will default to 'DgpECS-{cluster}-{service}'.
    codedeploy-deployment-group: # optional
    # Whether to force a new deployment of the service. Valid value is "true". Will default to not force a new deployment.
    force-new-deployment: # optional
    - name: OpenShift Client Installer
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/oc-installer@a129dec08aa1cd54ee1e0ac0ebcfbf7b12720582
  uses: redhat-actions/oc-installer@v1
  with:
    # "oc version to install. It can be a version (eg. 4.6) or a URL pointing to an oc download.
If left blank, the latest oc is installed."

    oc_version: # default is latest
    - name: Await Taktile Deployment
  # You may pin to the exact commit or the version.
  # uses: taktile-org/await-taktile-deployment-action@a4fc46fe2d0d4ef6dc52ed91edfd01f77a919783
  uses: taktile-org/await-taktile-deployment-action@v0.0.3
  with:
    # Your Taktile API key
    TKTL_API_KEY: 
    - name: Codefresh pipeline runner
  # You may pin to the exact commit or the version.
  # uses: codefresh-io/codefresh-pipeline-runner@c563a2bb98a7b8522192aaabf79ee9504141f8dc
  uses: codefresh-io/codefresh-pipeline-runner@v7
  with:
    # codefresh cli build variables, see https://codefresh-io.github.io/cli/pipelines/run-pipeline/#setting-variables-through-the-command for more information.
    args: # optional
    - name: Knative Service Manager
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/kn-service-manager@9d456952c2b59c36db2bb2b83adfa983b1c787a4
  uses: redhat-actions/kn-service-manager@v1
  with:
    # The Knative Service Name
    service_name: 
    # The Kubernetes Namespace to deploy to. Defaults to current context's namespace.
    namespace: # optional
    # The Knative service command, accepted commands are create, update, apply and delete
    command: # optional, default is create
    # The Knative Service Image
    container_image: 
    # Any extra arguments to append to the kn <command>
    kn_extra_args: # optional
    # The registry user to use to create the image pull secret
    registry_user: # optional
    # The registry user password
    registry_password: # optional
    # "Pass --force to kn create. If the service already exists,
the service will be replaced, instead of kn create failing.
This input has no effect if command is not create"

    force_create: # optional, default is false
    - name: Create Release in Octopus Deploy
  # You may pin to the exact commit or the version.
  # uses: OctopusDeploy/create-release-action@012f6d4665776076c9f145b2ff726667a7581203
  uses: OctopusDeploy/create-release-action@v1.0.2
  with:
    # The API key used to access Octopus Deploy. You must provide an API key or username and password. If the guest account is enabled, a key of API-GUEST may be used. It is strongly recommended that this value retrieved from a GitHub secret.
    api_key: # optional
    # Cancel the deployment if the deployment_timeout is exceeded (the default timeout is 10 minutes).
    cancel_on_timeout: # optional, default is false
    # The name or ID of the channel to use for the new release. If omitted, the best channel will be selected.
    channel: # optional
    # The path to a configuration file of default values with one "key=value" per line.
    config_file: # optional
    # Enable debug logging.
    debug: # optional, default is false
    # Use the default version number of all packages for this release.
    default_package_version: # optional, default is false
    # The time at which deployment should start (scheduled deployment), specified as any valid DateTimeOffset format, and assuming the time zone is the current local time zone.
    deploy_at: # optional
    # The name or ID of the environment to automatically deploy to (i.e. "Production" or "Environments-1"); specify this argument multiple times to deploy to multiple environments.
    deploy_to: # optional
    # The duration between between deployment status checks (format: HH:MM:SS).
    deployment_check_sleep_cycle: # optional, default is 00:00:10
    # The duration to wait for the deployment to finish (format: HH:MM:SS). Note: This will not stop the deployment; the input value, wait_for_deployment is required.
    deployment_timeout: # optional, default is 00:00:10
    # A comma-separated list of machine names to exclude in the deployed environment. If empty, all machines in the environment will be considered.
    exclude_machines: # optional
    # If a project is configured to skip packages with already-installed versions, override this setting to force re-deployment.
    force: # optional, default is false
    # Force download of installed packages.
    force_package_download: # optional, default is false
    # Use Guided Failure mode.
    guided_failure: # optional, default is false
    # Create the release ignoring any version rules specified by the channel.
    ignore_channel_rules: # optional, default is false
    # Ignore existing releases if present in Octopus Deploy with the matching version number.
    ignore_existing: # optional, default is false
    # Ignore certificate errors when communicating with Octopus Deploy. Warning: enabling this option creates a security vulnerability.
    ignore_ssl_errors: # optional, default is false
    # The log level; valid options are "verbose", "debug", "information", "warning", "error", and "fatal".
    log_level: # optional, default is debug
    # Time at which scheduled deployment should expire, specified as any valid DateTimeOffset format, and assuming the time zone is the current local time zone.
    no_deploy_after: # optional
    # Print the raw log of failed tasks.
    no_raw_log: # optional, default is false
    # The version number to use for a package in the release (format: StepName:Version or PackageID:Version or StepName:PackageName:Version).
    package: # optional
    # Pre-release for latest version of all packages to use for this release.
    package_prerelease: # optional
    # The version number of all packages to use for this release.
    package_version: # optional
    # The folder designated for containing packages.
    packages_folder: # optional
    # The password to used to authenticate with Octopus Deploy. It is strongly recommended to retrieve this value from a GitHub secret.
    password: # optional
    # Show progress of the deployment.
    progress: # optional, default is false
    # The name or ID of the project associated with this release.
    project: # optional
    # The URL of a proxy to use (i.e. https://proxy.example.com).
    proxy: # optional
    # The password used to connect to a proxy. It is strongly recommended to retrieve this value from a GitHub secret. If proxy_username and proxy_password are omitted and proxy URL is specified, the default credentials are used.
    proxy_password: # optional
    # The username used to connect to a proxy. It is strongly recommended to retrieve this value from a GitHub secret.
    proxy_username: # optional
    # Redirect the raw log of failed tasks to a file.
    raw_log_file: # optional
    # The release notes associated with the new release (Markdown is supported).
    release_notes: # optional
    # Path to a file that contains release notes for the new release. Supports Markdown files.
    release_notes_file: # optional
    # The number for the new release.
    release_number: # optional
    # The base URL hosting Octopus Deploy (i.e. "https://octopus.example.com/"). It is recommended to retrieve this value from an environment variable.
    server: # optional
    # Skip a step by name.
    skip: # optional
    # The name or ID of a space within which this command will be executed. If omitted, the default space will be used.
    space: # optional
    # A comma-separated list of machine names to target in the deployed environment. If not specified all machines in the environment will be considered.
    specific_machines: # optional
    # Create a deployment for the tenant with this name or ID; specify this argument multiple times to add multiple tenants or use a wildcard ("*") to deploy to all tenants who are ready for this release (according to lifecycle).
    tenant: # optional
    # Create a deployment for tenants matching this tag; specify this argument multiple times to build a query/filter with multiple tags.
    tenant_tag: # optional
    # A timeout value in seconds for network operations.
    timeout: # optional, default is 600
    # The username used to authenticate with Octopus Deploy. You must provide an apiKey or username and password. It is strongly recommended to retrieve this value from a GitHub secret.
    username: # optional
    # Values for any prompted variables in the format, Label:Value. For JSON values, embedded quotation marks should be escaped with a backslash.
    variable: # optional
    # Wait for deployment to finish.
    wait_for_deployment: # optional, default is false
    # Perform a dry run; do not create or deploy a release.
    what_if: # optional, default is false
    - name: Run Runbook in Octopus Deploy
  # You may pin to the exact commit or the version.
  # uses: OctopusDeploy/run-runbook-action@042dd45c396e343ebf30ebdeb61be4266b9de03a
  uses: OctopusDeploy/run-runbook-action@v1.0.0
  with:
    # The API key used to access Octopus Deploy. You must provide an API key or username and password. If the guest account is enabled, a key of API-GUEST may be used. It is strongly recommended that this value retrieved from a GitHub secret.
    api_key: # optional
    # Cancel the deployment if the deployment_timeout is exceeded (the default timeout is 10 minutes).
    cancel_on_timeout: # optional, default is false
    # The path to a configuration file of default values with one "key=value" per line.
    config_file: # optional
    # Enable debug logging.
    debug: # optional, default is false
    # A comma-delimited list of environments in Octopus Deploy in which to run (i.e. "Dev,Test,Prod").
    environments: # optional
    # A comma-separated list of machine names to exclude in the deployed environment. If empty, all machines in the environment will be considered.
    exclude_machines: # optional
    # Force download of installed packages.
    force_package_download: # optional, default is false
    # Use Guided Failure mode.
    guided_failure: # optional, default is false
    # Ignore certificate errors when communicating with Octopus Deploy. Warning: enabling this option creates a security vulnerability.
    ignore_ssl_errors: # optional, default is false
    # The log level; valid options are "verbose", "debug", "information", "warning", "error", and "fatal".
    log_level: # optional, default is debug
    # Print the raw log of failed tasks.
    no_raw_log: # optional, default is false
    # The time at which scheduled runbook run should expire, specified as any valid DateTimeOffset format, and assuming the time zone is the current local time zone.
    no_run_after: # optional
    # The password to used to authenticate with Octopus Deploy. It is strongly recommended to retrieve this value from a GitHub secret.
    password: # optional
    # The name or ID of the project associated with this runbook.
    project: 
    # The URL of a proxy to use (i.e. https://proxy.example.com).
    proxy: # optional
    # The password used to connect to a proxy. It is strongly recommended to retrieve this value from a GitHub secret. If proxy_username and proxy_password are omitted and proxy URL is specified, the default credentials are used.
    proxy_password: # optional
    # The username used to connect to a proxy. It is strongly recommended to retrieve this value from a GitHub secret.
    proxy_username: # optional
    # Redirect the raw log of failed tasks to a file.
    raw_log_file: # optional
    # The time at which runbook run should start (scheduled run), specified as any valid DateTimeOffset format, and assuming the time zone is the current local time zone.
    run_at: # optional
    # The name or ID of the runbook. If the name is supplied, the project input value must also be specified.
    runbook: # optional
    # The maximum length of time that the console session will wait for the runbook run to finish. Note: This will not stop the run. This input requires the wait_for_run input value to be true (format: HH:MM:SS). The default is 10 minutes.
    run_timeout: # optional, default is 00:10:00
    # The base URL hosting Octopus Deploy (i.e. "https://octopus.example.com/"). It is recommended to retrieve this value from an environment variable.
    server: # optional
    # Show progress of the runbook.
    show_progress: # optional, default is false
    # Skip a step by name.
    skip: # optional
    # The name or ID of a space within which this command will be executed. If omitted, the default space will be used.
    space: # optional
    # A comma-separated list of machine names to target in the deployed environment. If not specified all machines in the environment will be considered.
    specific_machines: # optional
    # Create a deployment for the tenant with this name or ID; specify this argument multiple times to add multiple tenants or use a wildcard ("*") to deploy to all tenants who are ready for this release (according to lifecycle).
    tenant: # optional
    # Create a deployment for tenants matching this tag; specify this argument multiple times to build a query/filter with multiple tags.
    tenant_tag: # optional
    # A timeout value in seconds for network operations.
    timeout: # optional, default is 600
    # The username used to authenticate with Octopus Deploy. You must provide an apiKey or username and password. It is strongly recommended to retrieve this value from a GitHub secret.
    username: # optional
    # Values for any prompted variables in the format, Label:Value. For JSON values, embedded quotation marks should be escaped with a backslash.
    variable: # optional
    # Indicates whether or not to wait synchronously for deployment to finish.
    wait_for_run: # optional, default is false
    - name: Push To Registry
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/push-to-registry@97623df94312db8bb23fd8c42b747583175b999d
  uses: redhat-actions/push-to-registry@v2
  with:
    # Name of the image to push (e.g. username/imagename or imagename)
    image: 
    # The tag or tags of the image to push. For multiple tags, seperate by a space. For example, "latest v1"
    tags: # optional, default is latest
    # Hostname and optional namespace to push the image to (eg. quay.io/username or quay.io)
    registry: 
    # Username to use as credential to authenticate to the registry
    username: # optional
    # Password to use as credential to authenticate to the registry
    password: # optional
    # Verify TLS certificates when contacting the registry
    tls-verify: # optional, default is true
    # After copying the image, write the digest of the resulting image to the file.
By default, the filename will be determined from the image and tag.
The contents of this file are the digest output.

    digestfile: # optional
    # Extra args to be passed to podman push.
Separate arguments by newline. Do not use quotes - @actions/exec will do the quoting for you.

    extra-args: # optional
    - name: Install Octopus CLI
  # You may pin to the exact commit or the version.
  # uses: OctopusDeploy/install-octopus-cli-action@aee5b620e9107e6ef3ae0cbd25dfde10e0910168
  uses: OctopusDeploy/install-octopus-cli-action@v1.1.6
  with:
    # Octopus CLI version
    version: # optional, default is latest
    - name: Push Package to Octopus Deploy
  # You may pin to the exact commit or the version.
  # uses: OctopusDeploy/push-package-action@db2b64b77368373659086c2b2631b02019fdcca0
  uses: OctopusDeploy/push-package-action@v1.0.1
  with:
    # The API key used to access Octopus Deploy. You must provide an API key or username and password. If the guest account is enabled, a key of API-GUEST may be used. It is strongly recommended that this value retrieved from a GitHub secret.
    api_key: # optional
    # The path to a configuration file of default values with one "key=value" per line.
    config_file: # optional
    # Enable debug logging.
    debug: # optional, default is false
    # Ignore certificate errors when communicating with Octopus Deploy. Warning: enabling this option creates a security vulnerability.
    ignore_ssl_errors: # optional, default is false
    # The log level; valid options are "verbose", "debug", "information", "warning", "error", and "fatal".
    log_level: # optional, default is debug
    # Determines the action to perform with package if it already exists in the repository. Valid values are "FailIfExists", "OverwriteExisting", and "IgnoreIfExists".
    overwrite_mode: # optional, default is FailIfExists
    # A comma-delimited list of packages to push to Octopus Deploy (i.e. package1,package2).
    packages: # optional
    # The password to used to authenticate with Octopus Deploy. It is strongly recommended to retrieve this value from a GitHub secret.
    password: # optional
    # The URL of a proxy to use (i.e. https://proxy.example.com).
    proxy: # optional
    # The password used to connect to a proxy. It is strongly recommended to retrieve this value from a GitHub secret. If proxy_username and proxy_password are omitted and proxy URL is specified, the default credentials are used.
    proxy_password: # optional
    # The username used to connect to a proxy. It is strongly recommended to retrieve this value from a GitHub secret.
    proxy_username: # optional
    # If the package already exists in the repository, the default behavior is to reject the new package being pushed. You can pass this flag to overwrite the existing package. This flag may be deprecated in a future version; passing it is the same as using "OverwriteExisting" for the input, overwrite_mode.
    release_existing: # optional
    # The base URL hosting Octopus Deploy (i.e. "https://octopus.example.com/"). It is recommended to retrieve this value from an environment variable.
    server: # optional
    # The name or ID of a space within which this command will be executed. If omitted, the default space will be used.
    space: # optional
    # A timeout value in seconds for network operations.
    timeout: # optional, default is 600
    # Use delta compression when uploading packages to Octopus Deploy.
    use_delta_compression: # optional, default is true,
    # The username used to authenticate with Octopus Deploy. You must provide an apiKey or username and password. It is strongly recommended to retrieve this value from a GitHub secret.
    username: # optional
    - name: OpenShift Login
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/oc-login@11b98b2a0c4b972c9791d58edbf378ce0f060359
  uses: redhat-actions/oc-login@v1.1
  with:
    # Openshift Server URL.
    openshift_server_url: 
    # Openshift Bearer Token. Store in a secret.
    openshift_token: # optional
    # Openshift Username. Must be used with openshift_password.
    openshift_username: # optional
    # Openshift Password. Store in a secret. Must be used with openshift_username.
    openshift_password: # optional
    # Skip TLS certificate verification when connecting to the cluster.
    insecure_skip_tls_verify: # optional, default is false
    # Contents of a Certificate Authority (.crt) file for your cluster's SSL certificate. Store in a secret.
    certificate_authority_data: # optional
    # Set current context's namespace to this, after logging in.
    namespace: # optional
    # "By default, the cluster name is masked, since it can be used to derive the server URL.
Set this to true to skip masking the cluster name."

    reveal_cluster_name: # optional, default is false
    - name: OpenShift Self Hosted Runner Installer
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/openshift-actions-runner-installer@1ae07bff8c27b2b06fbd55ef36eada3a078ac3e9
  uses: redhat-actions/openshift-actions-runner-installer@v1.0.0
  with:
    # GitHub Personal access token. The token must have the "repo" permission scope.
For organization runners, the token must also have the "admin:org" scope.

    github_pat: 
    # Repository or organization for the self-hosted runner.
For example, "redhat-actions/check-self-hosted-runner" for a repository, or "redhat-actions" for an organization.
Defaults to the current repository.

    runner_location: # optional
    # Container image to use for the runner.
    runner_image: # optional
    # Tag to use for the runner container image.
    runner_tag: # optional
    # Labels in the runners to check for.
For multiple labels, separate by comma and an optional space. For example, "label1, label2".

    runner_labels: # optional
    # Number of runner replicas to create.
    runner_replicas: # optional, default is 1
    # Optional namespace (aka project) to pass to all Helm or Kubernetes commands.

    namespace: # optional
    # Uninstall any release that matches the `helm_release_name` and `namespace` before running `helm install`.
If this is false, and the release exists, the action will fail when the `helm install` fails.

    helm_uninstall_existing: # optional, default is true
    # The Helm Release name to give the new runner release. Defaults to the repository or org name plus "-runners".
    helm_release_name: # optional
    # Any other arguments to pass to the 'helm install' command.
Separate arguments by newline. Do not use quotes - @actions/exec will do the quoting for you.

    helm_extra_args: # optional
    # Version of our Helm Chart to install. Defaults to the latest.
    helm_chart_version: # optional
    - name: Pulumi CLI Action
  # You may pin to the exact commit or the version.
  # uses: pulumi/actions@dc3e7a2411e3a04bc47ed6c5005601c2ba8753c7
  uses: pulumi/actions@v3.1.0
  with:
    # Pulumi command to run, eg. up
    command: 
    # Which stack you want to apply to, eg. dev
    stack-name: 
    # Location of your Pulumi files. Defaults to ./
    work-dir: # optional, default is ./
    # If true, a comment will be created with results
    comment-on-pr: # optional, default is false
    # Github Token
    github-token: # optional, default is ${{ github.token }}
    # A cloud URL to log in to
    cloud-url: # optional, default is 
    # Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded.
    parallel: # optional, default is 2147483647
    # Optional message to associate with the update operation
    message: # optional, default is 
    # Return an error if any changes occur during this update
    expect-no-changes: # optional
    # Display operation as a rich diff showing the overall change
    diff: # optional
    # Specify resources to replace. Multiple resources can be specified one per line
    replace: # optional
    # Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified one per line
    target: # optional
    # Allows updating of dependent targets discovered but not specified in target.
    target-dependents: # optional, default is false
    # Perform a stack refresh as part of the operation
    refresh: # optional, default is false
    # Create the stack if it currently does not exist
    upsert: # optional, default is false
    - name: Steam - Deploy
  # You may pin to the exact commit or the version.
  # uses: game-ci/steam-deploy@c18eb6aa08a18e5c4a6c7a1affe355f4031f809e
  uses: game-ci/steam-deploy@v0.1
  with:
    # The app id within steam partner network.
    appId: # default is 
    # Description for this build.
    buildDescription: # optional
    # The username of your builder account.
    username: # default is 
    # The password of your builder account.
    password: # default is 
    # The multi-factor authentication code from steam guard, that is emailed when attempting to sign in.
    mfaCode: # optional, default is 
    - name: ServiceNow CI/CD Apply Changes
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/sncicd-apply-changes@d9e560381b65fc450f8dc85b084c1a6cc40e503c
  uses: ServiceNow/sncicd-apply-changes@2.0.0
  - name: ServiceNow CI/CD Install App
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/sncicd-install-app@c2cd948de450aff560f8d2572255f758385996c7
  uses: ServiceNow/sncicd-install-app@2.0.0
  with:
    # Application version to install
    version: 
    # Version of the base application on which to apply the customizations
    baseAppVersion: # optional
    # Only applicable if Application Customization is active and the associated application is a higher version than the currently installed version
    autoUpgradeBaseApp: # optional
    - name: ServiceNow CI/CD Rollback App
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/sncicd-rollback-app@4e322960b74926a35d60c5e321962a75c5a93249
  uses: ServiceNow/sncicd-rollback-app@2.0.0
  with:
    # Application version to rollback
    version: 
    - name: ServiceNow CI/CD Run ATF Test Suite
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/sncicd-tests-run@49e9a72f68d0d1a2501d24a2cb14ed31b32a9ea8
  uses: ServiceNow/sncicd-tests-run@2.0.0
  with:
    # Name of the browser to use to run the client test. 
    browserName: # optional
    # Starting value of the version of the browser specified in browser_name to use to run the test. For example, if you enter '9', that would enable all 9.x.x.x versions
    browserVersion: # optional
    # Name of the operating system under which to run the test suite.
    osName: # optional
    # Starting value of the version of the operating system under which to run the test suite. For example, if you enter '8', that would enable all 8.x.x.x versions.
    osVersion: # optional
    # Required if testSuiteName is not specified
    testSuiteSysId: # optional
    # Required if testSuiteSysId is not specified
    testSuiteName: # optional
    - name: ServiceNow CI/CD Activate Plugin
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/sncicd-plugin-activate@a12a95b41b8e026f9107d0c38f22245a5f4cf8d7
  uses: ServiceNow/sncicd-plugin-activate@2.0.0
  with:
    # Plugin ID to be installed
    pluginID: 
    - name: ServiceNow CI/CD Instance Scan
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/sncicd-instance-scan@3acee37296d42bfafcb50cb04253409a83b42c44
  uses: ServiceNow/sncicd-instance-scan@2.0.0
  with:
    # Type of scan process. Can be equal to full, point, suite_combo, suite_scoped, suite_update.
    scantype: 
    # URL param if point scan type is specified.
    targetTable: # optional
    # URL param if point scan type is specified.
    targetSysId: # optional
    # URL param if suite_combo scan type is specified.
    comboSysId: # optional
    # URL param if suite_scoped or suite_update scan type is specified.
    suiteSysId: # optional
    # Payload params, comma separated(if suite_scoped or suite_update scan type is specified).
    appScopeSysIds: # optional
    # Payload params, comma separated(if suite_scoped or suite_update scan type is specified).
    updateSetSysIds: # optional
    - name: ServiceNow CI/CD Rollback Plugin
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/sncicd-plugin-rollback@600e3f11252fa6690ea329d129854eed2ed3f291
  uses: ServiceNow/sncicd-plugin-rollback@2.0.0
  with:
    # Plugin ID to be rolled back
    pluginID: 
    - name: Setup Pulumi CLI
  # You may pin to the exact commit or the version.
  # uses: pulumi/setup-pulumi@b374ceb6168550de27c6eba92e01c1a774040e11
  uses: pulumi/setup-pulumi@v2.0.0
  with:
    # Version of the Pulumi CLI to install, or 'latest' (default). This accepts semver ranges like ^3.0.0.
    pulumi-version: # default is latest
    # Token used to query pulumi versions
    github-token: # default is ${{ github.token }}
    - name: oc-new-app
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/oc-new-app@d74a8e684e47a4e10b851043685e95380d62a265
  uses: redhat-actions/oc-new-app@v1
  with:
    # Name to use for generated application artifacts
    app_name: 
    # "Environment variable key-value pairs to pass to the build container at the run time.
Use the form env_name=env_value, and separate arguments with newlines."

    build_env: # optional
    # "Registry credentials file to use to create a pull secret.
Set this to "docker" or "podman" depending on which tool you used to log in"

    create_pull_secret_from: # optional
    # "The name (reference) of the image to create deployment.
It can be a container image or an image stream"

    image: 
    # "In the case of private images, provide the image pull secret if you have already created that.
Otherwise, provide inputs create_pull_secret_from or registry_hostname, registry_username and registry_password"

    image_pull_secret_name: # optional
    # The OpenShift project/Kubernetes namespace to deploy to. Defaults to current context's.
    namespace: # optional
    # "A port to expose from the application container through a Service.
If exactly one port is exposed in the container metadata, then this input can be omitted."

    port: # optional
    # The Hostname/domain of the container image registry such as quay.io, docker.io. to create pull secret
    registry_hostname: # optional
    # Registry username to use for the pull secret
    registry_username: # optional
    # Password, encrypted password, or access token of the provided registry to use for the pull secret
    registry_password: # optional
    - name: oc-new-app
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/oc-new-app@d74a8e684e47a4e10b851043685e95380d62a265
  uses: redhat-actions/oc-new-app@v1
  with:
    # Name to use for generated application artifacts
    app_name: 
    # "Environment variable key-value pairs to pass to the build container at the run time.
Use the form env_name=env_value, and separate arguments with newlines."

    build_env: # optional
    # "Registry credentials file to use to create a pull secret.
Set this to "docker" or "podman" depending on which tool you used to log in"

    create_pull_secret_from: # optional
    # "The name (reference) of the image to create deployment.
It can be a container image or an image stream"

    image: 
    # "In the case of private images, provide the image pull secret if you have already created that.
Otherwise, provide inputs create_pull_secret_from or registry_hostname, registry_username and registry_password"

    image_pull_secret_name: # optional
    # The OpenShift project/Kubernetes namespace to deploy to. Defaults to current context's.
    namespace: # optional
    # "A port to expose from the application container through a Service.
If exactly one port is exposed in the container metadata, then this input can be omitted."

    port: # optional
    # The Hostname/domain of the container image registry such as quay.io, docker.io. to create pull secret
    registry_hostname: # optional
    # Registry username to use for the pull secret
    registry_username: # optional
    # Password, encrypted password, or access token of the provided registry to use for the pull secret
    registry_password: # optional
    - name: ServiceNow CI/CD Batch Install
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/sncicd-batch-install@cd0fe0c6cf7d8bf5baab47c8de34f98540b67a9d
  uses: ServiceNow/sncicd-batch-install@2.0.1
  with:
    # Source of the payload(file/workflow)
    source: 
    # Filename(or a path without trailing slash) of the manifest JSON file is source equals to file(Default: now_batch_manifest.json)
    filename: # optional
    # JSON string with payload if source equals to workflow
    manifest: # optional
    - name: ServiceNow CI/CD Publish App
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/sncicd-publish-app@47637072820da005ce51de1e18bfbc0fd70427d8
  uses: ServiceNow/sncicd-publish-app@2.0.1
  with:
    # Application version to publish
    version: # optional
    # Developer notes to store with the application.
    devNotes: # optional
    # Version template ( like 2.4 ).
    versionTemplate: # optional
    # exact, detect, autodetect, template
    versionFormat: # optional
    # Increment version level, should be positive or zero, Default: 1.
    incrementBy: # optional
    # If true, require appSysID instead of appScope
    isAppCustomization: # optional
    - name: Kubernetes bake
  uses: Azure/k8s-bake@v1
  with:
    # Acceptable values: helm or kompose or kustomize
    renderEngine: 
    # Required if renderEngine == helm. Helm chart to bake.
    helmChart: # optional
    # Relevant if renderEngine == helm. Array of path to override files. Each path should be mentioned on a newline
    overrideFiles: # optional
    # Relevant if renderEngine == helm. Override values to set.
    overrides: # optional
    # Relevant if renderEngine == helm. Release name to be used for Helm option.
    releaseName: # optional
    # Required if renderEngine == kustomization. Path to directory or the Git repository containing kustomization.yaml file.
    kustomizationPath: # optional
    # Required if renderEngine == kompose. Path(s) to Docker compose files
    dockerComposeFile: # optional
    # Version of kubectl. Installs a specific version of helm binary
    helm-version: # optional
    # Version of kubectl. Installs a specific version of kubectl binary
    kubectl-version: # optional
    # Version of kubectl. Installs a specific version of kompose binary
    kompose-version: # optional
    # When set to true, the output of the bake command would not be shown.
    silent: # optional
    - name: Azure Pipelines Action
  uses: Azure/pipelines@v1
  with:
    # Fullyqualified URL to the Azure DevOps organization along with project name(eg, https://dev.azure.com/organization/project-name or https://server.example.com:8080/tfs/DefaultCollection/project-name)
    azure-devops-project-url: 
    # Name of the Azure Pipline to be triggered
    azure-pipeline-name: 
    # Paste personal access token of the user as value of secret variable:AZURE_DEVOPS_TOKEN
    azure-devops-token: 
    - name: Create secret in Kubernetes cluster
  uses: Azure/k8s-create-secret@v1.1
  with:
    # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
    namespace: # optional
    # Container registry url
    container-registry-url: # optional
    # Container registry username
    container-registry-username: # optional
    # Container registry password
    container-registry-password: # optional
    # Container registry email
    container-registry-email: # optional
    # Type of Kubernetes secret. For example, docker-registry or generic
    secret-type: # default is docker-registry
    # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
    secret-name: 
    # Specify keys and literal values to insert in generic type secret.For example, --from-literal=key1=value1 --from-literal=key2="top secret".
    arguments: # optional
    - name: App Service Web App Build Action
  uses: Azure/appservice-build@v2
  with:
    # Relative path (within the repository) to the source directory of the project you want to build; if no value is provided for this, the root of the repository ("GITHUB_WORKSPACE" environment variable) will be built.
    source-directory: # optional
    # Programming platform used to build the web app; if no value is provided, Oryx will determine the platform to build with. The supported values are "dotnet", "nodejs", "php" and "python".
    platform: # optional
    # Version of the programming platform used to build the web app; if no value is provided, Oryx will determine the version needed to build the repository.
    platform-version: # optional
    # The directory where the build output has to be put.
    output-directory: # optional
    - name: Azure Policy Compliance Scan
  uses: Azure/policy-compliance-scan@v0
  with:
    # Mandatory. Takes full identifier for one or more azure resources, resource groups or subscriptions. The on-demand policy compliance scan is triggered for all of these. The ID can generally be found in the properties section of the resource in Azure Portal.
    scopes: 
    # Optional. Takes full identifier for one or more azure resources, resource groups(followed by /*). If the resources are found non-compliant after the scan completion, the action fails. However, in this input you can specify resources or resource groups for which the compliance state will be ignored. The action will pass irrespective of the compliance state of these resources. In case you want the action to always pass irrespective of the compliance state of resources, you can set its value as all.
    scopes-ignore: # optional
    # Optional. Depending on the breadth, the time taken for compliance scan can range from a few minutes to several hours. By default, the action will wait for the compliance scan to complete and succeed or fail based on the compliance state of resources. However, you can mark this input as false, in which case the action will trigger the compliance scan and succeed immediately. The status of the triggered scan and the compliance state of resources would have to be then viewed in activity log of the resource in Azure portal.
    wait: # optional, default is true
    # Optional. Defaults to false. If false, the action will upload a CSV file containing a list of resources that are non-compliant after the triggered scan is complete. The CSV file can be downloaded as an artifact from the workflow run for manual analysis. Note that the number of rows in CSV are capped at 100,000.
    skip-report: # optional
    # Optional. The filename for the CSV to be uploaded. Ignored if skip-report is set to true.
    report-name: # optional
    - name: Manage Azure Policy
  uses: Azure/manage-azure-policy@v0
  with:
    # mandatory. The path(s) to the directory that contains Azure policy files. The files present only in these directories  will be considered by this action for updating policies in Azure. You can use wild card characters as mentioned * or ** for specifying sub folders in a path. For more details on the use of the wild cards check [glob wildcard patterns](https://github.com/isaacs/node-glob#glob-primer). Note that a definition file should be named as policy.json and assignment filenames should start with assign keyword.
    paths: 
    # Optional. These are the directory paths that will be ignored by the action. If you have a specific policy folder that is not ready to be applied yet, specify the path here. Note that ignore-paths has a higher precedence compared to paths parameter.
    ignore-paths: # optional
    # Optional. These are policy assignment files that would be considered by the action. This parameter is especially useful if you want to apply only those assignments that correspond to a specific environment for following a safe deployment practice. E.g. _assign.AllowedVMSKUs-dev-rg.json_. You can use wild card character * to match multiple file names. E.g. _assign.\*dev\*.json_. If this parameter is not specified, the action will consider all assignment files that are present in the directories mentioned in paths parameter.
    assignments: # optional
    # Optional. There are 2 modes for this action - _incremental_ and _complete_. If not specified, the action will use incremental mode by default. In incremental mode, the action will compare already exisiting policy in azure with the contents of policy provided in repository file. It will apply the policy only if there is a mismatch. On the contrary, the complete mode will apply all the files present in the specified paths irrespective of whether or not repository policy file has been updated.
    mode: # optional
    - name: Build Azure Virtual Machine Image
  uses: Azure/build-vm-image@v0
  with:
    # This is the Azure region in which the Image Builder will run.
    location: # optional
    # This is the Resource Group where the temporary Imagebuilder Template resource will be created.
    resource-group-name: 
    # The name of the image builder template resource to be used for creating and running the Image builder service.
    image-builder-template-name: # optional
    # The value is an integer which is used as timeout in minutes for running the image build.
    build-timeout-in-minutes: # optional, default is 240
    # You can override the VM size, from the default value i.e. Standard_D1_v2.
    vm-size: # optional, default is Standard_D1_v2
    # The identity that will be used to do the role assignment and resource creation
    managed-identity: # optional
    # [ PlatformImage | SharedImageGallery | ManagedImage ]
    source-image-type: # optional, default is PlatformImage
    # OS types supported: [ linux | windows ].
    source-os-type: 
    # Value of source-image supported by Azure Image Builder.
    source-image: # optional
    # This takes the path to a directory or a file in the runner. By default, it points to the default download directory of the github runner.
    customizer-source: # optional
    # The customer can enter multi inline powershell or shell commands and use variables to point to directories inside the downloaded location.
    customizer-script: # optional
    # The value is boolean and set to false by default. This value is for Windows images only, the image builder will run Windows Update at the end of the customizations and also handle the reboots it requires.
    customizer-windows-update: # optional
    # ManagedImage | SharedImageGallery | VHD
    dist-type: # optional, default is ManagedImage
    # Image Resource Id to be created by AIB
    dist-resource-id: # optional
    # location of Image created by AIB
    dist-location: # optional
    # Every Image builder run is identified with a unique run id.
    run-output-name: # optional
    # The values set will be used to set the user defined tags on the custom image artifact created.
    dist-image-tags: # optional
    - name: Azure PostgreSQL Action
  uses: Azure/postgresql@v1
  with:
    # Server name of Azure DB for PostgreSQL. Example: fabrikam.postgres.database.azure.com
    server-name: 
    # The connection string, including authentication information, for the Azure PostgreSQL Server. Please provide psql connection string. Example: psql "host={host} port={port} dbname={your_database} user={user} password={your_password} sslmode=require"
    connection-string: 
    # Path to PL/SQL script file to deploy. To specify multiple files, use the regex syntax : *.sql or folder/x/<regex>.sql
    plsql-file: 
    # Additional options supported by postgresql simple SQL shell. These options will be applied when executing the given file on the Azure DB for Postgresql. In case of multiple files, the same args will be applied for all files
    arguments: # optional
    - name: Azure MYSQL Deploy
  uses: Azure/mysql@v1
  with:
    # Server name of Azure DB for Mysql. Example: fabrikam.mysql.database.azure.com. When you connect using Mysql Workbench, this is the same value that is used for Hostname in Parameters
    server-name: 
    # The connection string, including authentication information, for the Azure MySQL Server. (deprecated)
    connection-string: # optional
    # Azure MySQL Server username for login
    username: # optional
    # Azure MySQL Server password for login
    password: # optional
    # Azure MySQL Server database (optional) to connect to. No database will be used automatically.
    database: # optional
    # Path to SQL script file to deploy
    sql-file: 
    # Additional options supported by mysql simple SQL shell. These options will be applied when executing the given file on the Azure DB for Mysql.
    arguments: # optional
    - name: Azure App Configuration Sync
  uses: Azure/AppConfiguration-Sync@v1.1.1
  with:
    # Path to the configuration file in the repo, relative to the repo root. Also supports glob patterns and multiple files
    configurationFile: 
    # Format of the configuration file. Valid values are: json, yaml, properties
    format: 
    # Connection string for the App Configuration instance
    connectionString: 
    # Separator used when flattening the configuration file to key-value pairs
    separator: 
    # Specifies whether to use a strict sync which will make the App Configuration instance exactly match the configuration file (deleting key-values not in the configuration file). Defaults to false
    strict: # optional
    # Prefix that will be added to the front of the keys
    prefix: # optional
    # Label to use when setting the key-value pairs. If not specified, a null label will be used
    label: # optional
    # Max depth (positive number) for flattening the configuration file
    depth: # optional
    # Stringified form of a JSON object with the following shape: { [propertyName: string]: string; }
    tags: # optional
    # Content type associated with the values
    contentType: # optional
    - name: Azure PowerShell Action
  uses: Azure/powershell@v1
  with:
    # Specify the Az PowerShell script here.
    inlineScript: 
    # Azure PS version to be used to execute the script, example: 1.8.0, 2.8.0, 3.4.0. To use the latest version, specify "latest".
    azPSVersion: 
    # Select the value of the ErrorActionPreference variable for executing the script. Options: stop, continue, silentlyContinue. Default is Stop.
    errorActionPreference: # optional, default is Stop
    # If this is true, this task will fail if any errors are written to the error pipeline, or if any data is written to the Standard Error stream.
    failOnStandardError: # optional, default is false
    # Used to pull Az module from Azure/az-ps-module-versions.  Since there's a default, this is typically not supplied by the user.
    githubToken: # optional, default is ${{ github.token }}
    - name: Azure Login
  uses: Azure/login@v1
  with:
    # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
    creds: 
    # Set this value to true to enable Azure PowerShell Login in addition to Az CLI login
    enable-AzPSSession: # optional
    # Name of the environment. Supported values are azurecloud, azurestack, azureusgovernment, azurechinacloud, azuregermancloud. Default being azurecloud
    environment: # optional, default is azurecloud
    # Set this value to true to enable support for accessing tenants without subscriptions
    allow-no-subscriptions: # optional
    - name: Azure CLI Action
  uses: Azure/cli@1.0.4
  with:
    # Specify the script here
    inlineScript: 
    # Azure CLI version to be used to execute the script. If not provided, latest version is used
    azcliversion: # optional, default is latest
